#compdef dotnet
# vim: set ft=zsh ts=2 sw=2 et:

# Based on https://learn.microsoft.com/en-us/dotnet/core/tools/enable-tab-autocomplete

local completions=(${(@f)$(dotnet complete "$words" 2> /dev/null)})

# If the completion list is empty, continue with normal completion.
if (( $#completions == 0 )); then
  _arguments '*::arguments: _normal'
  return
fi

_dotnet-local-tools() {
  local -a tools

  tools=(${(@f)$(dotnet tool list --local 2> /dev/null)})
  tools=(${tools:5})

  local i
  for ((i = 1; i <= $#tools; i++)); do
    if (( i % 4 == 0 )); then
      printf '%s\n' $tools[$i]
    fi
  done
}

_dotnet-global-tools() {
  local -a tools

  tools=(${(@f)$(dotnet tool list --global 2> /dev/null)})
  tools=(${tools:5})

  for ((i = 1; i <= $#tools; i++)); do
    if (( i % 3 == 0 )); then
      printf '%s\n' $tools[$i]
    fi
  done
}

# Tools are invoked as the second arg.
if (( $#words == 2 )); then
  local -a local_tools global_tools

  local_tools=($(_dotnet-local-tools))
  global_tools=($(_dotnet-global-tools))

  _describe -t local_tool 'dotnet local tool' local_tools
  _describe -t global_tool 'dotnet global tool' global_tools
fi

# Did we receive a tool as the second arg? If yes, then handle the command line
# as a precommand.
if (( $#words >= 3 )); then
  local -a tools
  tools=($(_dotnet-local-tools) $(_dotnet-global-tools))

  if (( ${tools[(ie)$words[2]]} <= $#tools )); then
    # Tool matched, handle the rest of the command line using its completion.
    _precommand
    return
  fi
fi

_values argument $completions
