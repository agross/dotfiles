#!/usr/bin/env bash

# Commits all changes without running hooks and publishes them to a "private"
# branch on the server. (Private means nobody else will likely fetch it,
# although everbody can.)
#
# After publishing the "backup commit" the commit itself is removed and
# the index is restored. Partially staged files will be retained as such.
#
# Let's say your user name is agross and you work in feature/foo. git feierabend
# will create a server-side branch named refs/private/agross/feature/foo. You
# can inspect server-side branches by running git ls-remote origin.
#
# To restore the branch on your or anybody elses machine run:
# git fetch origin refs/private/agross/feature/foo
# Which stores the downloaded commits as FETCH_HEAD. You can then create a new
# branch with the downloaded commits by running
# git branch something FETCH_HEAD
#
# If you are in detached HEAD state the server-side branch will be named
# "detached-HEAD".

set -eu

# Save current commit and index.
commit="$(git rev-parse HEAD)"
index="$(git write-tree)"

# Stage all files.
git add --all

# Create commit.
if ! git commit --no-verify --message "Feierabendcommit $(date)"; then
  printf '%bNo changes to commit.\n%b' '\e[1;32m' '\e[0m'
fi

ref="$(git symbolic-ref --short --quiet HEAD || printf 'detached-HEAD')"

# Upload.
if ! git push --force origin "HEAD:refs/private/$USER/$ref"; then
  printf '%bFailed to upload.\n%b' '\e[1;31m' '\e[0m'
  exit=1
else
  exit=0
fi

# Restore previous HEAD commit and index.
git reset --mixed "$commit"
git read-tree "$index"

exit $exit
