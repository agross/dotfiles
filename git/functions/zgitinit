# shellcheck disable=SC2148

##
## Load with `autoload -U zgitinit; zgitinit'
##

typeset -gA zgit_info
zgit_info=()

zgit_chpwd_hook() {
  zgit_info_update
}

zgit_preexec_hook() {
  # 'git <optional>' or '<optional> git <optional>' or '<optional> .git<optional>' is executed.
  if [[ $2 == git\ * ]] || [[ $2 == *\ git\ * ]] || [[ $2 == *\ .git* ]]; then
    zgit_precmd_do_update=1
  fi
}

zgit_precmd_hook() {
  if [ $zgit_precmd_do_update ]; then
    unset zgit_precmd_do_update
    zgit_info_update
  fi
}

zgit_info_update() {
  zgit_info=()

  local -a info
  if ! info=("${(@f)$(git rev-parse --git-dir \
                                    --is-inside-git-dir \
                                    --is-bare-repository \
                                    --is-inside-work-tree \
                                    --show-toplevel \
                                    2> /dev/null)}"); then
    # Since git 2.25 --show-toplevel will error in bare repos which is OK
    # because we will not need it.
    if [[ "$info[3]" != true ]]; then
      return
    fi
  fi

  if [[ -z "$info[1]" ]]; then
    return
  fi

  zgit_info[dir]=$info[1]
  zgit_info[ingitdir]=$info[2]
  zgit_info[bare]=$info[3]
  zgit_info[inwork]=$info[4]
  [[ -n "$info[5]" ]] && zgit_info[toplevel]=$info[5]
}

zgit_isgit() {
  if [ -z "$zgit_info[dir]" ]; then
    return 1
  else
    return 0
  fi
}

zgit_ingitdir() {
  zgit_isgit || return
  if [ "$zgit_info[ingitdir]" = "true" ]; then
    return 0
  else
    return 1
  fi
}

zgit_isbare() {
  zgit_isgit || return
  if [ "$zgit_info[bare]" = "true" ]; then
    return 0
  else
    return 1
  fi
}

zgit_inworktree() {
  zgit_isgit || return
  if [ "$zgit_info[inwork]" = "true" ]; then
    return 0
  else
    return 1
  fi
}

zgit_head() {
  zgit_isgit || return 1

  if [ -z "$zgit_info[head]" ]; then
    local name=''
    name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null)
    if [ $? -eq 0 ]; then
      if [[ $name == refs/(heads|tags)/* ]]; then
        name=${name#refs/(heads|tags)/}
      fi
    else
      name=$(git rev-parse --short HEAD 2> /dev/null)
      if [ $? -ne 0 ]; then
        return 1
      fi

      aka=$(git name-rev --name-only --no-undefined --always HEAD 2> /dev/null)
      if [ $? -ne 0 ]; then
        return 1
      elif [[ $aka == remotes/* ]]; then
        aka=${aka#remotes/}
      fi
      aka=" (= $aka)"
    fi
    zgit_info[head]="$name$aka"
  fi

  echo $zgit_info[head]
}

zgit_branch() {
  zgit_inworktree || return 1

  if [ -z "$zgit_info[branch]" ]; then
    local branch=$(git symbolic-ref HEAD 2> /dev/null)
    if [ $? -eq 0 ]; then
      branch=${branch##*/}
    else
      branch=$(git name-rev --name-only --always HEAD 2> /dev/null)
    fi
    zgit_info[branch]=$branch
  fi

  echo $zgit_info[branch]
  return 0
}

zgit_tracking_remote() {
  zgit_inworktree || return 1

  local branch
  if [ -n "$1" ]; then
    branch=$1
  elif [ -z "$zgit_info[branch]" ]; then
    branch=$(zgit_branch)
    [ $? -ne 0 ] && return 1
  else
    branch=$zgit_info[branch]
  fi

  local k="tracking_$branch"
  local remote
  if [ -z "$zgit_info[$k]" ]; then
    remote=$(git config branch.$branch.remote)
    zgit_info[$k]=$remote
  fi

  echo $zgit_info[$k]
  return 0
}

zgit_tracking_merge() {
  zgit_inworktree || return 1

  local branch
  if [ -z "$zgit_info[branch]" ]; then
    branch=$(zgit_branch)
    [ $? -ne 0 ] && return 1
  else
    branch=$zgit_info[branch]
  fi

  local remote=$(zgit_tracking_remote $branch)
  [ $? -ne 0 ] && return 1
  if [ -n "$remote" ]; then # tracking branch
    local merge=$(git config branch.$branch.merge)
    if [ $remote != "." ]; then
      merge=$remote/$(basename $merge)
    fi
    echo $merge
    return 0
  else
    return 1
  fi
}

zgit_isindexclean() {
  zgit_inworktree || return 1

  if git diff --diff-filter=MARCDTXB --cached --quiet 2> /dev/null 1>&2; then
    return 0
  else
    return 1
  fi
}

zgit_isworktreeclean() {
  zgit_inworktree || return 1

  if git diff --diff-filter=MARCDTXB --quiet 2> /dev/null 1>&2; then
    return 0
  else
    return 1
  fi
}

zgit_hasuntracked() {
  zgit_inworktree || return 1

  local -a flist
  flist=($(git -C "${zgit_info[toplevel]}" ls-files --others --exclude-standard 2> /dev/null))
  if [ $#flist -gt 0 ]; then
    return 0
  else
    return 1
  fi
}

zgit_hasunmerged() {
  zgit_inworktree || return 1

  if git diff --diff-filter=U --quiet 2> /dev/null 1>&2; then
    return 1
  else
    return 0
  fi
}

zgit_has-assume-unchanged() {
  zgit_inworktree || return 1

  if git -C "${zgit_info[toplevel]}" ls-files -v 2> /dev/null | grep --quiet '^[[:lower:]S]'; then
    return 0
  else
    return 1
  fi
}

zgit_svnhead() {
  zgit_inworktree || return 1

  local commit=$1
  if [ -z "$commit" ]; then
    commit='HEAD'
  fi

  git svn find-rev $commit
}

zgit_rebaseinfo() {
  zgit_inworktree || return 1

  if [ -d $zgit_info[dir]/rebase-merge ]; then
    dotest=$zgit_info[dir]/rebase-merge
  elif [ -d $zgit_info[dir]/.dotest-merge ]; then
    dotest=$zgit_info[dir]/.dotest-merge
  elif [ -d .dotest ]; then
    dotest=.dotest
  else
    return 1
  fi

  zgit_info[dotest]=$dotest

  zgit_info[rb_onto]=$(cat "$dotest/onto")
  if [ -f "$dotest/upstream" ]; then
    zgit_info[rb_upstream]=$(cat "$dotest/upstream")
  else
    zgit_info[rb_upstream]=
  fi
  if [ -f "$dotest/orig-head" ]; then
    zgit_info[rb_head]=$(cat "$dotest/orig-head")
  elif [ -f "$dotest/head" ]; then
    zgit_info[rb_head]=$(cat "$dotest/head")
  fi
  zgit_info[rb_head_name]=$(cat "$dotest/head-name")

  return 0
}

autoload -U add-zsh-hook
add-zsh-hook chpwd zgit_chpwd_hook
add-zsh-hook preexec zgit_preexec_hook
add-zsh-hook precmd zgit_precmd_hook

zgit_info_update

# vim: set ft=zsh ts=2 sw=2 et:
