[alias]
	s = status

	# Set executable bit on file systems that do not support it.
	set-x   = update-index --chmod=+x
	unset-x = update-index --chmod=-x

	# Temporarily ignoring files.
	ignore     = update-index --skip-worktree
	unignore   = update-index --no-skip-worktree
	# Lowercase: files marked assume-unchanged, S: files marked skip-worktree.
	ignored    = !git ls-files -v | grep '^[[:lower:]S]' | cut --characters=3-

	gitignored = ls-files --others --directory --ignored --exclude-standard

	# Git trainings: created often-used graph.
	diverged = !git init && git some 2 && git checkout -b topic && git some 3 && git checkout - && git some

	# git commit.
	ci   = commit
	cim  = commit --message
	cima = commit --all --message

	# Correcting commits.
	amend  = commit --amend --no-edit
	reword = commit --amend --message
	aua    = commit --amend --no-edit --all
	aaa    = !git add --all && git commit --amend --no-edit
	fixup  = commit --fixup
	undo   = reset HEAD~1
	rh     = reset --hard

	# Index-related commands.
	a       = add
	au      = add --update
	aa      = add --all
	ap      = add --patch
	cop     = checkout --patch
	rp      = reset HEAD --patch
	unstage = reset HEAD

	# git branch and remote.
	co  = checkout
	b   = branch
	brs = branch --all --verbose

	# "New" commits on the current branch that are not reachable from master or main.
	new = !git log --oneline $(git show-ref --verify --hash refs/heads/master 2> /dev/null || git show-ref --verify --hash refs/heads/main)..HEAD
	# Commits on master or main that are not reachable from the current branch, i.e. that are "missing" here.
	missing = !git log --oneline HEAD..$(git show-ref --verify --hash refs/heads/master 2> /dev/null || git show-ref --verify --hash refs/heads/main)

	# git remote.
	rv = remote --verbose
	pf = push --force-with-lease

	# git rebase.
	r  = rebase --interactive
	rc = rebase --continue
	ra = rebase --abort
	rs = rebase --skip

	# git diff.
	d       = diff
	wd      = diff --word-diff
	dt      = difftool

	dc      = diff --staged
	wdc     = diff --staged --word-diff
	preview = diff --staged

	# Handling merges.
	mt        = mergetool
	unresolve = checkout --merge

	# git log.
	ll   = log
	l    = log --oneline --max-count=15
	ld   = log --oneline --max-count=15 --decorate
	lp   = log --patch
	gl   = log --graph --oneline --decorate --exclude=refs/stash --exclude=refs/notes/* --all
	# Mnemomic: who did what?
	wdw  = log --date=relative --pretty='format:%C(yellow)%h%Creset %C(bold blue)%an%Creset %C(bold green)%cr%Creset %s'

	# Reviewing patches.
	# You can append -<number> to increase the number of commits to show.
	sns          = show --name-status
	sno          = show --name-only
	review       = show
	reviewwd     = show --word-diff
	most-changed = !git log --format=%n --name-only | grep -v '^$' | sort | uniq --count | sort --numeric-sort --reverse | head --lines=50

	# git cherry-pick.
	pick = cherry-pick

	# git clean.
	cleanf = clean -xdf

	# Disable pager.
	np = !git --no-pager
	dp = !git -c pager.show='less -FRX' -c pager.log='less -FRX' -c pager.diff='less -FRX'

	# Push GW repo to GitLab.
	sync-gitlab = !"url=$(git remote get-url origin); url=${url#git@grossweber.com:}; git push ssh://git@gitlab.grossweber.com:10022/$url --all"

# vim: set ft=gitconfig ts=2 sw=2 noet:
