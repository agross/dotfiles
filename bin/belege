#!/usr/bin/env zsh

set -euo pipe_fail

autoload -Uz colors && colors

zmodload zsh/pcre
setopt extended_glob rematchpcre

zmodload zsh/zutil

force=
zparseopts -D -F -K -- \
           {f,-force}=force \
 || return


year=$(date +'%Y')
month=$(date +'%m')

accounting=~/GROSSWEBER/Rechnungswesen/Finanzbuchhaltung
open=offen/AG*/*.pdf(.N)
list=_files.csv

type::taxi()
{
  [[ $1 == Taxi* ]] || return 1

  printf '%s\n' brutto
  printf '%s\n' 7
}

type::db()
{
  [[ $1 == DB* ]] || return 1

  printf '%s\n' brutto
  printf '%s\n' 7
}

type::hotel()
{
  [[ $1 == Hotel* ]] || return 1

  # Hotels likely have 2 VAT amounts.
  printf '%s\n' brutto-7
  printf '%s\n' 7
  printf '%s\n' brutto-19
  printf '%s\n' 19
}

type::congstar()
{
  [[ $1 == congstar* ]] || return 1

  # Most often a static gross amount.
  printf '%s\n' 20
  printf '%s\n' 19
}

type::telekom()
{
  [[ $1 == Telekom* ]] || return 1

  # Most often a static gross amount.
  printf '%s\n' 99,89
  printf '%s\n' 19
}

type::default()
{
  printf '%s\n' brutto
  printf '%s\n' 19
}

values_for() {
  local supplier=${1:?Need supplier}
  local number=${2:?Need number}

  local types=(taxi db hotel congstar telekom default)

  for type in $types; do
    if type::$type $supplier $number; then
      return
    fi
  done
}

csvs_written=()

files=($accounting/$~open)

for file in ${(i)files}; do
  dirname=${file:h}
  basename=${file:r:t}
  extname=${file:e}

  supplier=${basename% *}
  number=${basename##* }

  value_index=0
  for gross vat in $(values_for $supplier $number); do
    value_index=$((value_index + 1))
    csv=$dirname/$list

    printf '%b%s%b: %b%s%b %b%s%b %b%s%%%b\n' \
           $fg_bold[blue] \
           ${file:t2} \
           $reset_color\
           $fg_bold[green] \
           $supplier \
           $reset_color \
           $fg_bold[cyan] \
           $number \
           $reset_color \
           $fg_bold[magenta] \
           $vat \
           $reset_color

    existing_receipt=(~/GROSSWEBER/Rechnungswesen/Finanzbuchhaltung/**/*$number*~*/offen/*(.NY1))
    if (( $#existing_receipt )); then
      >&2 printf '%bDuplicate receipt%b, not updating: %s\n' \
                 $fg_bold[red] \
                 $reset_color \
                 $existing_receipt[1]
      if (( $#force )); then
        >&2 printf '%bForce given%b, continuing anyway\n' \
                   $fg_bold[green] \
                   $reset_color
      else
        continue
      fi
    fi

    printf -v supplier_number '%s;"%s";' ${supplier:0:20} $number
    printf -v gross_vat '%s;;%s' $gross $vat

    if [[ -f $csv ]] && (( value_index == 1 )) && grep --quiet --fixed-strings $supplier_number $csv; then
      >&2 printf 'Entry exists, not updating: %s\n' $supplier_number
      continue
    fi

    echo $supplier_number$gross_vat >> $csv
    csvs_written+=($csv)
  done
done

for csv in $csvs_written; do
  # Remove BOM (which sort does not handle), sort, add BOM for our beloved Umlauts.
  sed '1s/^\xEF\xBB\xBF//' < $csv | \
    sort --ignore-case > $csv.temp

  printf '\xEF\xBB\xBF' | cat - $csv.temp > $csv
  rm -- $csv.temp
done

if (( $#csvs_written )); then
  ${VISUAL:-${EDITOR:-vi}} -- ${(u)csvs_written}
fi
