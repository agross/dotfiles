#!/usr/bin/env zsh

set -euo pipe_fail

autoload -Uz colors && colors

zmodload zsh/pcre
setopt extended_glob rematchpcre

year=$(date +'%Y')
month=$(date +'%m')

accounting=~/GROSSWEBER/Rechnungswesen/Finanzbuchhaltung
archive=$year/$month/*/Alexander\ Gro√ü/(offen|[[:digit:]]-[[:digit:]]|[[:digit:]][[:digit:]]-[[:digit:]])/*(.N)
open=offen/AG*/*.pdf(.N)
list=_files.csv

prefix()
{
  local file index
  local -a files

  files=($accounting/$~archive)
  files+=($accounting/$~open)

  # Reverse-sort files by name and numbers numerically to handle prefixes like
  # 2023-01-01-10 being ordered after 2023-01-01-9, not 2023-01-01-1.
  files=(${(iOn)files:t})

  for file in $files; do
    # Find the first file that starts with the <year>-<month>-<day>-<index> pattern.
    if [[ $file =~ '^\d{4}-\d{2}-\d{2}-(\d+)\s' ]]; then
      index=$match[1]
      break
    fi
  done

  index=$((index + 1))

  printf '%s-%s-01-%s' $year $month $index
}

type::taxi()
{
  [[ $1 == Taxi* ]] || return 1

  printf '%s\n' brutto
  printf '%s\n' 7
}

type::db()
{
  [[ $1 == DB* ]] || return 1

  printf '%s\n' brutto
  printf '%s\n' 7
}

type::hotel()
{
  [[ $1 == Hotel* ]] || return 1

  # Hotels likely have 2 VAT amounts.
  printf '%s\n' brutto-7
  printf '%s\n' 7
  printf '%s\n' brutto-19
  printf '%s\n' 19
}

type::congstar()
{
  [[ $1 == congstar* ]] || return 1

  # Most often a static gross amount.
  printf '%s\n' 25
  printf '%s\n' 19
}

type::telekom()
{
  [[ $1 == Telekom* ]] || return 1

  # Most often a static gross amount.
  printf '%s\n' 54,94
  printf '%s\n' 19
}

type::default()
{
  printf '%s\n' brutto
  printf '%s\n' 19
}

values_for() {
  local supplier=${1:?Need supplier}
  local number=${2:?Need number}

  local types=(taxi db hotel congstar telekom default)

  for type in $types; do
    if type::$type $supplier $number; then
      return
    fi
  done
}

lists_written=()

files=($accounting/$~open)

for file in ${(i)files}; do
  dirname=${file:h}
  basename=${file:r:t}
  extname=${file:e}

  if [[ $basename =~ '^(\d{4}-\d{2}-\d{2})-(\d+)\s' ]]; then
    printf '%b%s%b: %bHas prefix, ignoring%b\n' \
           $fg_bold[blue] \
           ${file:t2} \
           $reset_color\
           $fg_bold[gray] \
           $reset_color

    continue
  fi

  supplier=${basename% *}
  number=${basename##* }

  for gross vat in $(values_for $supplier $number); do
    csv=$dirname/$list

    printf '%b%s%b: %b%s%b %b%s%b %b%s%%%b\n' \
           $fg_bold[blue] \
           ${file:t2} \
           $reset_color\
           $fg_bold[green] \
           $supplier \
           $reset_color \
           $fg_bold[cyan] \
           $number \
           $reset_color \
           $fg_bold[magenta] \
           $vat \
           $reset_color

    existing_receipt=(~/GROSSWEBER/Rechnungswesen/Finanzbuchhaltung/**/*$number*~*/offen/*(.NY1))
    if (( $#existing_receipt > 0 )); then
      >&2 printf '%bDuplicate receipt%b, not updating: %s\n' \
                 $fg_bold[red] \
                 $reset_color \
                 $existing_receipt[1]
      continue
    fi

    printf -v supplier_number '%s;"%s";' ${supplier:0:20} $number
    printf -v gross_vat '%s;;%s' $gross $vat

    if [[ -f $csv ]]; then
      if grep --quiet --fixed-strings $supplier_number $csv; then
        >&2 printf 'Entry exists, not updating: %s\n' $supplier_number
        continue
      fi
    else
      # Write UTF-8 BOM for our beloved Umlauts.
      printf '\xEF\xBB\xBF' > $csv
    fi

    echo $supplier_number$gross_vat >> $csv
    lists_written+=($csv)
  done

  mv --verbose --no-clobber -- $file "$dirname/$(prefix) $basename.$extname"
done

if (( $#lists_written )); then
  ${VISUAL:-${EDITOR:-vi}} -- ${(u)lists_written}
fi
